using System.Runtime.CompilerServices;

int count = 0;
int wordLength = 5;
int maxWords = 5;
string fileName = "perfect-words-big.txt";

Dictionary<char, int> letterFrequency = new Dictionary<char, int> ();

string[] ReadFile(string path)
{
    return File.ReadAllLines(path);
}

int GetBitMask(string word)
{
    int bitMask = 0;
    foreach (char c in word)
    {
        bitMask |= 1 << (c - 'a');
    }
    return bitMask;
}

[MethodImpl(MethodImplOptions.AggressiveInlining)]
int GetStringValue(string word)
{
    int value = 0;
    foreach (char c in word)
    {
        if (value == 0)
        {
            value = letterFrequency[c];
        }
        else if (letterFrequency[c] < value)
        {
            value = letterFrequency[c];
        }
    }
    return value;
}

// Start timer
var watch = new System.Diagnostics.Stopwatch();
watch.Start();

// Filter out words that are not 5 letters long
// Filter out words that have repeating characters
// Order List
string[] allWordsIncludingNotFiveLetters = ReadFile(fileName);
allWordsIncludingNotFiveLetters = allWordsIncludingNotFiveLetters.Where(
    word => word.Length == wordLength && word.Distinct().Count() == wordLength
).ToArray();

for (int wordIndex = 0; wordIndex < allWordsIncludingNotFiveLetters.Length; wordIndex++)
{   
    string word = allWordsIncludingNotFiveLetters[wordIndex];
    foreach (char c in word)
    {
        if (letterFrequency.ContainsKey(c))
        {
            letterFrequency[c]++;
        }
        else
        {
            letterFrequency.Add(c, 1);
        }
    }
}

letterFrequency = letterFrequency.OrderBy(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
allWordsIncludingNotFiveLetters = allWordsIncludingNotFiveLetters.OrderBy(word => GetStringValue(word)).ToArray();


int[] allWords = new int[allWordsIncludingNotFiveLetters.Length];
Parallel.For(0, allWordsIncludingNotFiveLetters.Length, i =>
{
    allWords[i] = GetBitMask(allWordsIncludingNotFiveLetters[i]);
});

int allWordsLength = allWords.Length;
Console.WriteLine($"Total words: {allWordsLength}");

[MethodImpl(MethodImplOptions.AggressiveInlining)]
void Find5Words(int bitmask, int iterator, int[] currentCombination, int depth){
    currentCombination[depth] = iterator;

    if (depth == maxWords -1)
    {
        count++;
        string combination = String.Join(" ", currentCombination.Select(i => allWordsIncludingNotFiveLetters[i]));
        Console.WriteLine(combination);
        return;
    }

    for (int wordIterator = iterator; wordIterator < allWordsLength; wordIterator++)
    {
        int word = allWords[wordIterator];
        if ((word & bitmask) == 0)
        {
            Find5Words(bitmask | word, wordIterator, currentCombination, depth + 1);
        }
    }
}

int[] firstWords = allWords.Take(
    letterFrequency.Values.ElementAt(0) + letterFrequency.Values.ElementAt(1)).ToArray();

List<Task> tasks = new List<Task>();
for (int i = 0; i < firstWords.Length; i++)
{   
    int index = i;
    tasks.Add(Task.Run(() => Find5Words(firstWords[index], index, new int[maxWords], 0 )));
}

// var watch2 = new System.Diagnostics.Stopwatch();
// watch2.Start();
// watch2.Stop();
// Console.WriteLine("Time {0} Ticks; {1} ms, {2} seconds", watch2.ElapsedTicks, watch2.ElapsedMilliseconds, Decimal.Divide(watch2.ElapsedMilliseconds, 1000));

Task.WaitAll(tasks.ToArray());

// Stop timer
// var watch = new System.Diagnostics.Stopwatch();
// watch.Start();
watch.Stop();
Console.WriteLine("Time {0} Ticks; {1} ms, {2} seconds", watch.ElapsedTicks, watch.ElapsedMilliseconds, Decimal.Divide(watch.ElapsedMilliseconds, 1000));




Console.WriteLine($"Total combinations: {count}");